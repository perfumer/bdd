<?php

namespace Generated\{{ builder.namespace }};

{% if builder.parentClass %}
abstract class {{ builder.className }} extends {{ builder.parentClass }}{% if builder.interfaces.count > 0 %} implements {{ builder.interfaces|join(', ') }}{% endif %}
{% else %}
abstract class {{ builder.className }}{% if context.interfaces.count > 0 %} implements {{ builder.interfaces|join(', ') }}{% endif %}
{% endif %}

{
{% for name, type in builder.publicProperties %}
{% if type %}
    /**
     * @var {{ type }}
     */
{% endif %}
    public ${{ name }};

{% endfor %}
{% for name, type in builder.protectedProperties %}
{% if type %}
    /**
     * @var {{ type }}
     */
{% endif %}
    protected ${{ name }};

{% endfor %}
{% for name, type in builder.privateProperties %}
{% if type %}
    /**
     * @var {{ type }}
     */
{% endif %}
    private ${{ name }};

{% endfor %}
{% for name, context in builder.contexts %}
    /**
     * @var {{ context.class }}
     */
    private $_context_{{ name }};

{% endfor %}
{% for name, injection in builder.injections %}
    /**
     * @var {{ injection.type }}
     */
    private $_injected_{{ name }};

{% endfor %}
{% if builder.injections.count > 0 %}
    public function __construct({% for name, injection in builder.injections %}{{ injection.type }} ${{ name }}{%  if not loop.last %}, {% endif %}{% endfor %})
    {
{% for name, injection in builder.injections %}
        $this->_injected_{{ name }} = ${{ name }};
{% endfor %}
    }

{% endif %}
{% for method in builder.methods if method.isAbstract %}
    abstract {{ method.access }}{% if method.isStatic %} static{% endif %} function {{ method.name }}({% for argument, type in method.arguments %}{% if type %}{{ type }} {% endif %}${{ argument }}{% if not loop.last %}, {% endif %}{% endfor %});

{% endfor %}
{% for method in builder.methods if not method.isAbstract %}
    {% if method.isFinal %}final {% endif %}{{ method.access }}{% if method.isStatic %} static{% endif %} function {{ method.name }}({% for argument, type in method.arguments %}{% if type %}{{ type }} {% endif %}${{ argument }}{% if not loop.last %}, {% endif %}{% endfor %}){% if method.returnType %}: {{ method.returnType }}{% endif %}

    {
{% if method.isValidation %}
        $_valid = true;
{% endif %}
{% for name, value in method.initialVariables %}
        ${{ name }} = {{ value|default('null') }};
{% endfor %}

{% for code in method.prependedCode %}
        {{ code }}

{% endfor %}
{% for step in method.steps %}
{% for code in step.beforeCode %}
        {{ code }}

{% endfor %}
{% if method.isValidation or step.extraCondition %}
{% set space = '    ' %}
{% else %}
{% set space = '' %}
{% endif %}
{% if method.isValidation and step.extraCondition %}
        if ($_valid === {{ step.validationCondition ? 'true' : 'false' }} && {{ step.extraCondition }}) {
{% elseif method.isValidation and not step.extraCondition %}
        if ($_valid === {{ step.validationCondition ? 'true' : 'false' }}) {
{% elseif not method.isValidation and step.extraCondition %}
        if ({{ step.extraCondition }}) {
{% endif %}
{% for code in step.prependedCode %}
        {{ space }}{{ code }}

{% endfor %}
        {{ space }}{% if step.returnExpression %}{{ step.returnExpression }} = {% endif %}{{ step.callExpression }}{{ step.method }}({% for argument in step.arguments %}${{ argument }}{% if not loop.last %}, {% endif %}{% endfor %});
{% for code in step.appendedCode %}

        {{ space }}{{ code }}
{% endfor %}
{% if action.isValidation or step.extraCondition %}
        }
{% endif %}
{% for code in step.afterCode %}

        {{ code }}
{% endfor %}

{% endfor %}
{% for code in method.appendedCode %}

        {{ code }}
{% endfor %}
    }

{% endfor %}
{% for name, injection in builder.injections %}
    /**
     * @return {{ injection.type }}
     */
    final protected function get{{ name|title|replace({'_':''}) }}(): {{ injection.type }}
    {
        return $this->_injected_{{ name }};
    }

{% endfor %}
{% for name, context in builder.contexts %}
    /**
     * @return {{ context.class }}
     */
    final private function get{{ name|title|replace({'_':''}) }}Context(): {{ context.class }}
    {
        if ($this->_context_{{ name }} === null) {
            $this->_context_{{ name }} = new {{ context.class }}();
        }

        return $this->_context_{{ name }};
    }

{% endfor %}
}
