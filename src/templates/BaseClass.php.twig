<?php

namespace Generated\{{ context.namespace }};

{% if context.extendsClass %}
abstract class {{ context.className }} extends {{ context.extendsClass }}
{% else %}
abstract class {{ context.className }}
{% endif %}
{
{% for variable in context.properties %}
    protected ${{ variable }};
{% endfor %}

{% for step in context.steps %}
{% if step.service is null and step.context is null %}
    abstract protected function {{ step.functionName }}({{ step.methodArguments|join(', ') }});
{% endif %}
{% if step.context %}
    final private function {{ step.functionName }}({{ step.methodArguments|join(', ') }})
    {
        if ($this->_context_{{ step.contextName }} === null) {
            $this->_context_{{ step.contextName }} = new {{ step.context }}();
        }

        {% if step.returnExpression %}return {% endif %}$this->_context_{{ step.contextName }}->{{ step.method }}({{ step.methodArguments|join(', ') }});
    }
{% endif %}
{% endfor %}

{% for action in context.actions %}
    final public function {{ action.methodName }}({{ action.methodArguments|join(', ') }})
    {
        $_error = null;
        $_return = null;
{% for variable_name, variable_value in action.localVariables %}
        {{ variable_name }} = {{ variable_value|default('null') }};
{% endfor %}

{% block _action_local_variables %}
{% endblock %}

{% for step in action.steps %}
{% if step.beforeCode %}
        {{ step.before }}

{% endif %}
        if ($_error === null) {
{% if step.prependCode %}
            {{ step.prepend }}

{% endif %}
{% if step.functionName is not null %}
            {{ step.returnExpression }}$this->{{ step.functionName }}({{ step.callArguments|join(', ') }});
{% elseif step.service == '_parent' %}
            {{ step.returnExpression }}parent::{{ step.method }}({{ step.callArguments|join(', ') }});
{% else %}
            {{ step.returnExpression }}$this->{{ step.service }}->{{ step.method }}({{ step.callArguments|join(', ') }});
{% endif %}
{% if step.appendCode %}

            {{ step.append }}
{% endif %}
        }
{% if step.afterCode %}

        {{ step.after }}
{% endif %}
{% endfor %}

{% block _action_error_expression %}
        if ($_error !== null) {
            return $_error;
        }
{% endblock %}

{% block _action_return_expression %}
        return $_return;
{% endblock %}
    }

{% endfor %}
}
