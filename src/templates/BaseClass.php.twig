<?php

namespace Generated\{{ context.namespace }};

{% if context.extendsClass %}
abstract class {{ context.className }} extends {{ context.extendsClass }}
{% else %}
abstract class {{ context.className }}
{% endif %}
{
{% for variable in context.properties %}
    protected ${{ variable }};
{% endfor %}

{% for step in context.steps if step.service is null and step.context is null %}
    abstract protected function {{ step.functionName }}({{ step.headerArguments|join(', ') }});

{% endfor %}
{% for action in context.actions %}
    final public function {{ action.methodName }}({{ action.headerArguments|join(', ') }})
    {
        $_valid = true;
        $_return = null;
{% for variable_name, variable_value in action.localVariables %}
        {{ variable_name }} = {{ variable_value|default('null') }};
{% endfor %}

{% block _action_local_variables %}
{% endblock %}

{% for step in action.steps %}
{% if step.beforeCode %}
        {{ step.beforeCode }}

{% endif %}
        if ($_valid === {{ step.isValid ? 'true' : 'false' }}{% if step.condition %} && {{ step.condition }}{% endif %}) {
{% if step.prependCode %}
            {{ step.prependCode }}

{% endif %}
{% if step.functionName is not null %}
            {{ step.returnExpression }}$this->{{ step.functionName }}({{ step.bodyArguments|join(', ') }});
{% else %}
            {{ step.returnExpression }}{{ step.service }}{{ step.method }}({{ step.bodyArguments|join(', ') }});
{% endif %}
{% if step.appendCode %}

            {{ step.appendCode }}
{% endif %}
        }
{% if step.afterCode %}

        {{ step.afterCode }}
{% endif %}
{% endfor %}

{% block _action_return_expression %}
        return $_return;
{% endblock %}
    }

{% endfor %}
{% for step in context.steps if step.context %}
    final private function {{ step.functionName }}({{ step.headerArguments|join(', ') }})
    {
        {% if step.returnExpression %}return {% endif %}$this->get{{ step.contextName | capitalize }}Context()->{{ step.method }}({{ step.headerArguments|join(', ') }});
    }

{% endfor %}
{% for name, class in context.contexts %}
    final private function get{{ name | capitalize }}Context(): {{ class }}
    {
        if ($this->_context_{{ name }} === null) {
            $this->_context_{{ name }} = new {{ class }}();
        }

        return $this->_context_{{ name }};
    }

{% endfor %}
}
