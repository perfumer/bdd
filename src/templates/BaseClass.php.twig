<?php

namespace Generated\{{ context.namespace }};

{% if context.extendsClass %}
abstract class {{ context.className }} extends {{ context.extendsClass }}{% if context.interfaces %} implements {{ context.interfaces|join(', ') }}{% endif %}
{% else %}
abstract class {{ context.className }}{% if context.interfaces %} implements {{ context.interfaces|join(', ') }}{% endif %}
{% endif %}

{
{% for name, type in context.protectedProperties %}
{% if type %}
    /**
     * @var {{ type }}
     */
{% endif %}
    protected ${{ name }};

{% endfor %}
{% for name, type in context.privateProperties %}
{% if type %}
    /**
     * @var {{ type }}
     */
{% endif %}
    private ${{ name }};

{% endfor %}
{% if context.injected|length > 0 %}
    public function __construct({% for name, type in context.injected %}{{ type }} ${{ name }}{%  if not loop.last %}, {% endif %}{% endfor %})
    {
{% for name, type in context.injected %}
        $this->_injected_{{ name }} = ${{ name }};
{% endfor %}
    }

{% endif %}
{% for step in context.steps if step.service is null and step.context is null %}
    abstract protected function {{ step.functionName }}({{ step.headerArguments|join(', ') }});

{% endfor %}
{% for action in context.actions %}
    final public function {{ action.methodName }}({% for key, value in action.headerArguments %}{% if value %}{{ value }} {% endif %}{{ key }}{% if not loop.last %}, {% endif %}{% endfor %}){% if action.returnType %}: {{ action.returnType }}{% endif %}

    {
{% if action.hasValidation %}
        $_valid = true;
{% endif %}
{% if action.hasReturn %}
        $_return = null;
{% endif %}
{% for variable_name, variable_value in action.localVariables %}
        {{ variable_name }} = {{ variable_value|default('null') }};
{% endfor %}

{% block _action_local_variables %}
{% endblock %}
{% for step in action.steps %}
{% if step.beforeCode %}
        {{ step.beforeCode }}

{% endif %}
{% if action.hasValidation or step.condition %}
{% set space = '    ' %}
{% else %}
{% set space = '' %}
{% endif %}
{% if action.hasValidation and step.condition %}
        if ($_valid === {{ step.isValid ? 'true' : 'false' }} && {{ step.condition }}) {
{% elseif action.hasValidation and not step.condition %}
        if ($_valid === {{ step.isValid ? 'true' : 'false' }}) {
{% elseif not action.hasValidation and step.condition %}
        if ({{ step.condition }}) {
{% endif %}
{% if step.prependCode %}
        {{ space }}{{ step.prependCode }}

{% endif %}
{% if step.contextName is not null %}
        {{ space }}{% if step.returnExpression %}{{ step.returnExpression }} = {% endif %}$this->get{{ step.contextName | capitalize }}Context()->{{ step.method }}({{ step.bodyArguments|join(', ') }});
{% elseif step.functionName is not null %}
        {{ space }}{% if step.returnExpression %}{{ step.returnExpression }} = {% endif %}$this->{{ step.functionName }}({{ step.bodyArguments|join(', ') }});
{% else %}
        {{ space }}{% if step.returnExpression %}{{ step.returnExpression }} = {% endif %}{{ step.service }}{{ step.method }}({{ step.bodyArguments|join(', ') }});
{% endif %}
{% if step.appendCode %}

        {{ space }}{{ step.appendCode }}
{% endif %}
{% if action.hasValidation or step.condition %}
        }
{% endif %}
{% if step.afterCode %}

        {{ step.afterCode }}
{% endif %}

{% endfor %}
{% block _action_return_expression %}
{% if action.hasReturn %}
        return $_return;
{% endif %}
{% endblock %}
    }

{% endfor %}
{% for name, type in context.injected %}
    /**
     * @return {{ type }}
     */
    final protected function get{{ name|title|replace({'_':''}) }}(): {{ type }}
    {
        return $this->_injected_{{ name }};
    }

{% endfor %}
{% for name, class in context.contexts %}
    /**
     * @return {{ class }}
     */
    final private function get{{ name | capitalize }}Context(): {{ class }}
    {
        if ($this->_context_{{ name }} === null) {
            $this->_context_{{ name }} = new {{ class }}();
        }

        return $this->_context_{{ name }};
    }

{% endfor %}
}
