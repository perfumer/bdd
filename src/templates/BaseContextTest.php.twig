<?php

namespace Generated\Tests\{{ context.namespace }};

use PHPUnit\Framework\TestCase;

{% if context.extendsTest %}
abstract class {{ context.className }}Test extends {{ context.extendsTest }}
{% else %}
abstract class {{ context.className }}Test extends TestCase
{% endif %}
{
{% for step in context.steps %}
    abstract public function {{ step.functionName }}DataProvider();

{% endfor %}
{% for step in context.steps %}
    /**
     * @dataProvider {{ step.functionName }}DataProvider
     */
    final public function test{{ step.functionName[:1]|upper ~ step.functionName[1:] }}({% if step.headerArguments %}{{ step.headerArguments|join(', ') }}, {% endif %}$expected)
    {
        $_class_instance = new \{{ step.context }}();

        $this->assert{{ step.functionName[:1]|upper ~ step.functionName[1:] }}($_class_instance->{{ step.functionName }}({{ step.headerArguments|join(', ') }}), $expected);
    }

{% endfor %}
{% for step in context.steps %}
    protected function assert{{ step.functionName[:1]|upper ~ step.functionName[1:] }}($result, $expected)
    {
        $this->assertEquals($result, $expected);
    }

{% endfor %}
}
