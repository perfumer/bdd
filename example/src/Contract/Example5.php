<?php

namespace Barman\Example\Contract;

use Barman\Annotation\Output;
use Barman\Annotation\ServiceObject;
use Barman\Annotation\ServiceParent;
use Barman\Annotation\ServiceProperty;
use Barman\Annotation\ServiceSelf;
use Barman\Annotation\ServiceStatic;
use Barman\Annotation\ServiceThis;
use Barman\Example\Example5Parent;
use Barman\Example\Service\Math;

/**
 * Although Context and Injection are mostly used calls, there are some
 * other cases, such as "parent::", "self::", "$this->" etc.
 */
abstract class Example5 extends Example5Parent
{
    /**
     * Call the method "sum" of local object $math with arguments $a and $b,
     * and save the result to variable $sum.
     * @ServiceObject(name="math", method="sum", arguments={"a", "b"}, return="sum")
     *
     * Call the method "product" of $this ($this->product()) with arguments $sum and $c,
     * and save the result to variable $product.
     * @ServiceThis(method="product", arguments={"sum", "c"}, return="product")
     *
     * Call the method "quotient" of parent class (parent::quotient()) with arguments $product and $d,
     * and save the result to variable $quotient.
     * @ServiceParent(method="quotient", arguments={"product", "d"}, return="quotient")
     *
     * Call the method "difference" of the class property "math" ($this->math->difference()) with arguments $quotient and $e,
     * and save the result to variable $difference.
     * @ServiceProperty(name="math", method="difference", arguments={"quotient", "e"}, return="difference")
     *
     * Call the static method "double" of the class (self::double()) with argument $difference,
     * and save the result to variable $double.
     * @ServiceSelf(method="double", arguments={"difference"}, return="double")
     *
     * Call the static method "square" of the class Barman\Example\Service\Math (\Barman\Example\Service\Math::square()) with argument $double,
     * and provide the result to php return statement.
     * @ServiceStatic(name="\Barman\Example\Service\Math", method="square", arguments={"double"}, return=@Output)
     *
     * Look at the code, which will be generated by this Contract, in file example/generated/src/Example5.php
     *
     * Go to Example6.
     *
     * @param Math $math
     * @param int $a
     * @param int $b
     * @param int $c
     * @param int $d
     * @param int $e
     * @return int
     */
    abstract public function mathActions(Math $math, int $a, int $b, int $c, int $d, int $e): int;
}
