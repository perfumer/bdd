<?php

namespace Barman\Example\Contract;

use Barman\Annotation\Injection;
use Barman\Annotation\Output;

/**
 * Assume, we have a class Barman\Example\Service\Math (in file example/src/Service/Math.php)
 * and it has complicated instantiating. So, we can not use it as Context.
 *
 * For this case Barman provides Injection annotation, which injects instance of a class
 * to contract constructor.
 *
 * Let's define "math" as short alias for this class.
 * @Injection(name="math", type="\Barman\Example\Service\Math")
 */
interface Example3
{
    /**
     * This method does the same as in Example1 except that we use Injection annotation
     * instead of Context.
     *
     * @Injection(name="math", method="sum", arguments={"a", "b"}, return="sum")
     * @Injection(name="math", method="product", arguments={"sum", "c"}, return=@Output)
     *
     * Look at the code, which will be generated by this Contract, in file example/generated/src/Example3.php
     *
     * Go to Example4.
     *
     * @param int $a
     * @param int $b
     * @param int $c
     * @return int
     */
    public function sumThenProduct(int $a, int $b, int $c): int;
}
