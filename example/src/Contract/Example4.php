<?php

namespace Barman\Example\Contract;

use Barman\Annotation\Custom;
use Barman\Annotation\Output;

/**
 * As Context is a separate class, it does not have $this-> reference.
 * You should provide all the dependencies to context method arguments.
 * Sometimes it is very tricky to collect all the dependencies needed,
 * but inside the generated class they are all available via $this-> reference.
 * In this case we can implement context methods inside the generated class
 * via Custom annotation.
 */
interface Example4
{
    /**
     * This method gets sum of $a and $b, then multiplies result on $c.
     *
     * First, we call "sum" method of $this ($this->sum()) with arguments $a and $b,
     * and store the result to variable $sum:
     * @Custom(method="sum", arguments={"a", "b"}, return="sum")
     *
     * Next, we call "product" method of $this ($this->product()) with arguments $sum and $c,
     * and provide the result to php return statement.
     * @Custom(method="product", arguments={"sum", "c"}, return=@Output)
     *
     * Every Custom Annotation will generate abstract method, which you should implement
     * yourself in generated class. Be careful to use Custom annotations too often,
     * because methods they generate can not be tested easily.
     *
     * Look at the code, which will be generated by this Contract, in file example/generated/src/Example4.php
     *
     * In file example/src/Example4.php you can find implementation of methods "sum" and "product".
     *
     * Go to Example5.
     *
     * @param int $a
     * @param int $b
     * @param int $c
     * @return int
     */
    public function sumThenProduct(int $a, int $b, int $c): int;
}
