<?php

namespace Barman\Example\Contract;

use Barman\Annotation\Context;
use Barman\Annotation\Output;
use Barman\Annotation\Test;

/**
 * Sometimes Context has very specific logic, which unlikely
 * to be used in other Contracts. In this case it is convenient
 * to have Context in the same file as Contract (in order not to switch
 * often between files in IDE while coding).
 */
interface Example2
{
    /**
     * This method does the same as in Example1.
     *
     * We do the same steps. The only difference is we didn't define Context
     * in class annotation. Also we do not provide "name" to Context calls.
     * If no "name" is provided, Barman searches Context in the same namespace,
     * as Contract. Such contexts are called "default" contexts.
     *
     * @Context(method="sum", arguments={"a", "b"}, return="sum")
     * @Context(method="product", arguments={"sum", "c"}, return=@Output)
     *
     * Look at the code, which will be generated by this Contract, in file example/generated/src/Example2.php
     *
     * Go to Example3.
     *
     * @param int $a
     * @param int $b
     * @param int $c
     * @return int
     */
    public function sumThenProduct(int $a, int $b, int $c): int;
}

class Example2Context
{
    /**
     * @Test
     *
     * @param int $a
     * @param int $b
     * @return int
     */
    public function sum(int $a, int $b): int
    {
        return $a + $b;
    }

    /**
     * @Test
     *
     * @param int $a
     * @param int $b
     * @return int
     */
    public function product(int $a, int $b): int
    {
        return $a * $b;
    }
}
