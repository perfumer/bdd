<?php

namespace Barman\Example\Contract;

use Perfumerlabs\Perfumer\Step\ExpressionStep;
use Perfumerlabs\Perfumer\Annotation\Out;
use Perfumerlabs\Perfumer\Annotation\Error;

/**
 * This is Contract. Contract is an interface or abstract class,
 * which contains description of methods execution, provided by Barman annotations.
 *
 * Assume, we have a class Barman\Example\Context\Math (in file example/src/Context/Math.php).
 * This class is called Context. Context is a class with NO constructor,
 * and it consists of short methods. In other words, Context is a library of independent functions.
 *
 * Let's define "math" as short alias for this class.
 * Context(name="math", class="\Barman\Example\Context\Math")
 */
interface Example1
{
    /**
     * This method gets sum of $a and $b, then multiplies result on $c.
     *
     * Execution consists of 2 steps.
     *
     * First, we call "sum" method of "math" with arguments $a and $b, 
     * and we store the result of this to variable $sum:
     * @ExpressionStep(expression="asd", arguments={"a", "b"}, return="sum", validate=true)
     *
     * Second, we call "product" method of "math" with arguments $sum and $c,
     * and the result of this we provide to php return statement:
     * @ExpressionStep(expression="zxc", arguments={"sum", "c"}, return={"res", "rrr"})
     *
     * @Error(name="b", unless="sum")
     *
     * @Out(name="rrr")
     *
     * Look at the code, which will be generated by this Contract, in file example/generated/src/Example1.php
     *
     * Go to Example2.
     *
     * @param int $a
     * @param int $b
     * @param int $c
     * @return int
     */
    public function sumThenProduct(int $a, int $b, int $c): int;
}
